|- with c:?Unit->Unit.!Unit.end! connect let (f,c) = receive c in send (f unit) c to let (v,c) = receive (send (!\x:Unit.x) c) in let () = terminate c in v : Unit
|- with c:+{frog:?Unit->Unit.!Unit.end!, goat:end!} connect let c = select frog c in let (f,c) = receive c in send (f unit) c to case c of {frog:c.let (v,c) = receive (send (!\x:Unit.x) c) in let () = terminate c in v; goat:c.terminate c} : Unit
zed : Unit * Unit |- with c:+{frog:?Unit->Unit.!Unit.end!, goat:end!} connect let c = select frog c in let (f,c) = receive c in send (f unit) c to case c of {frog:c.let (v,c) = receive (send (let (a,b) = zed in !\x:Unit.x) c) in let () = terminate c in v; goat:c.let (a,b) = zed in let () = terminate c in a} : Unit
|- with c:&{gimme:+{tenner:end!}} connect case c of {gimme:d.select tenner d} to let c = select gimme c in case c of {tenner:e.terminate e} : Unit
|- with s:$&{gimme:+{tenner:end!}} connect serve s(c) = (case c of {gimme:c.select tenner c}) to let c = request s in let c = select gimme c in case c of {tenner:c.terminate c} : Unit
