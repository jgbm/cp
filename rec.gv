c: nu X.&{done:end!,more:!end?.X} |-
  corec c [ci:] ci (case c of { done c => c;
                                more c => let c = send (fork x:end! => x) c in
                                          c })
  : end!.

|- let d = fork c : nu X.&{done:end!,more:!end?.X} =>
               corec c [ci:] ci (case c of { done c => c;
                                             more c => let c = send (fork x:end! => x) c in
                                                       c }) in
   let d = select more d in
   let (z, d) = receive d in
   select done d : end?.

|- let rec [X.&{done:end!,more:!end?.X}] f c =
       case c of { done c => c;
                   more c => let c = send (fork x:end! => x) c in
                             f c } in
   let d = fork x:nu X.&{done:end!,more:!end?.X} => f x in
   let d = select more d in
   let (z, d) = receive d in
   select done d
 : end?.


--|- let rec [X.X] f (x : Int) c = f x c in
--   let c = fork x:nu X.X => f 42 x in
--   c : mu X.X.


|- let rec [X.?end?.X] f (x : Int) c =
     let (z, c) = receive c in f x c in
   let c = fork x:nu X.?end?.X => f 42 x in
   c : mu X.!end?.X.
