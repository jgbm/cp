comment "--";

token UIdent (upper (letter | digit | '_')*);
token LIdent (lower (letter | digit | '_')*);
separator LIdent ",";

Label. LabeledSession ::= LIdent ":" Session;
separator LabeledSession ",";

         Output.      Session ::= "!" Type "." Session;
         Input.       Session ::= "?" Type "." Session;
         Sum.         Session ::= "+" "{" [LabeledSession] "}";
         Choice.      Session ::= "&" "{" [LabeledSession] "}";
         OutTerm.     Session ::= "end!";
         InTerm.      Session ::= "end?";
         Server.      Session ::= "$" Session;
         Service.     Session ::= "#" Session;
         SVar.        Session ::= UIdent;
         Dual.        Session ::= "~" Session;
internal Neg.         Session ::= "~" UIdent;
         OutputType.  Session ::= "!!" UIdent "." Session;
         InputType.   Session ::= "??" UIdent "." Session;

          LinFun.   Type1 ::= Type2 "-@" Type1;
          UnlFun.   Type1 ::= Type2 "->" Type1;
          Tensor.   Type2 ::= Type3 "*" Type2;
          Lift.     Type3 ::= Session;
          UnitType. Type3 ::= "Unit";
coercions Type 3;

BindName. Pattern ::= LIdent;
BindUnit. Pattern ::= "(" ")";
BindPair. Pattern ::= "(" LIdent "," LIdent ")";

Branch.   Branch ::= LIdent ":" LIdent "." Term1;
separator nonempty Branch ";";

Var.          Term2 ::= LIdent;
Unit.         Term2 ::= "unit";
Link.         Term1 ::= "link" Term2 Term2;
LinLam.       Term1 ::= "\\" LIdent ":" Type "." Term;
UnlLam.       Term1 ::= "!" "\\" LIdent ":" Type "." Term;
App.          Term1 ::= Term1 Term2;
Pair.         Term2 ::= "(" Term1 "," Term1 ")";
Let.          Term1 ::= "let" Pattern "=" Term1 "in" Term1;
Send.         Term1 ::= "send" Term2 Term1;
Receive.      Term1 ::= "receive" Term2;
Select.       Term1 ::= "select" LIdent Term1;
Case.         Term1 ::= "case" Term1 "of" "{" [Branch] "}";
EmptyCase.    Term1 ::= "case" Term1 "(" [LIdent] ")" ":" Type "{" "}";
With.         Term1 ::= "with" LIdent ":" Session "connect" Term1 "to" Term1;
End.          Term1 ::= "terminate" Term1;
Serve.        Term1 ::= "serve" LIdent "(" LIdent ")" "=" Term1;
Request.      Term1 ::= "request" LIdent;
SendType.     Term1 ::= "sendType" Session Term;
ReceiveType.  Term1 ::= "receiveType" Term;

coercions Term 2;

Typing.  Typing ::= LIdent ":" Type;
separator Typing ",";
Assert.  Assertion ::= [Typing] "|-" Term ":" Type;

terminator Assertion ".";

Prog.    Prog ::= [Assertion];

entrypoints Type,Assertion,Prog;
