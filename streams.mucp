-- Streams.

type Source(A) = nu Q. &{end: 1, more: A * Q}.
type Sink(A)   = mu Q. +{end: bot, more: ~A || Q}.

check x<->y |- x:Source(bot), y:Sink(bot).
check x<->y |- x:Source(1), y:Sink(1).

-- Silly proof that _|_ -@ (1 * 1), by constructing an infinite stream of _|_ and then pealing two
-- off for the 1's.  The good news is that this reduces to the sensible thing.

def Bottoms(y,x) =
    roll x [w:1]
      (y<->w,
       case x {end: w<->x;
               more: w().x[v].(v[].0 | x[].0) }).
check Bottoms(y,x) |- y:bot, x:Source(1).

def Ones(z,x) = unr x.x/more.x(v).z[w].(w<->v | unr x.x/end.x<->z).
check Ones(z,x) |- x:Sink(1), z:1*1.

check cut [x:Source(1)] (Bottoms(y,x) | Ones(z,x)) |- y:bot, z:1*1.

-- Encodings of exponentials, for Church numerals.

type Quest(A) = mu P.+{w: bot, c: P || P, d: A}.
type Bang(A)  = nu P.&{w:1, c:P * P, d: A}.
type Church = forall A. (Quest(A * ~A) || (~A || A)).

def Zero(x) = x(A).x(s).x(z).unr s.s/w.s().z<->x.
check Zero(x) |- x:Church.

def Ping(x,y,w) =
    x[1].x[s].(roll s [v:~Quest(bot)]
                 (v<->y,
                  case s {w: unr v.v/w.v().s[].0;
                          c: unr v.v/c.v(u).s[t].(t<->u | s<->v);
                          d: unr v.v/d.s(t).t().s<->v}) |
               x[z].(z[].0 | x().w[].0)).

-- Phil's encodings

def One(x) = x(A).x(s).x(z).unr s.s/d.s[a].(a<->z | s<->x).
check One(x) |- x:Church.

def Two(x) = x(A).x(s).x(z).
             unr s.s/c.s(f).unr f.f/d.f[a].
             (a<->z | unr s.s/d.s[a].(a<->f | s<->x)).
check Two(x) |- x:Church.

-- Rewrite Two to use One.

def Two_(x) = x(A).x(s).x(z).
              unr s.s/c.s(f).unr f.f/d.f[a].
              (a<->z | cut [y:Church] (One(y) | y[A].y[w].(w <-> s | y[v].(v<->f | y<->x)))).
check Two_(x) |- x:Church.
check cut [x:Church] (Two_(x) | Ping(x,y,w)) |- y:Quest(bot),w:1.

-- Increment, based on above.

def Inc(x,y) = y(A).y(s).y(z).
               unr s.s/c.s(f).unr f.f/d.f[a].
               (a<->z | x[A].x[w].(w<->s | x[v].(v<->f | y<->x))).

check Inc(x,y) |- x:~Church,y:Church.

-- Demonstrate that Inc of One behaves as Two.

check cut [y:Church] (cut [x:Church] (One(x) | Inc(x,y)) |
                      Ping(y,a,b)) |- a:Quest(bot),b:1.

def Zeroes(y) = roll y [z:1]
                  (z[].0,
                   z().case y {w: y[].0;
                               c: y[w].(w[].0|y[].0);
                               d: Zero(y)}).
check Zeroes(y) |- y:Bang(Church).

def LiftIncr(x,y) = roll y [z:Bang(Church)]
                      (x<->z,
                       case y {w:unr z.z/w.z<->y;
                               c:unr z.z/c.z(w).y[v].(v<->w | y<->z);
                               d:unr z.z/d.Inc(z,y)}).
check LiftIncr(x,y) |- x:Quest(~Church), y:Bang(Church).

def Nats(x) = roll x [y:Bang(Church)]
                (Zeroes(y),
                 case x { end: unr y.y/w.y<->x;
                          more: unr y.y/c.y(z).x[w].(unr z.z/d.z<->w | LiftIncr(y,x)) }).
check Nats(x) |- x:Source(Church).

cut [x:Source(Church)]
  (Nats(x) |
   unr x.x/more.x(y).
   unr a.a/c.a(b).
   c[d].(Ping(y,b,d) | unr x.x/more.x(y).unr x.x/end.x().Ping(y,a,c)))
 |- a:Quest(bot),c:1*1.
